@include=../plexil.jpf

target=plexil.parser.Driver

costar.data=data plexil_LiteralASTNode {int ttype; plexil_LiteralASTNode down; plexil_LiteralASTNode right}; data net_n3_nanoxml_XMLElement{}

costar.predicate.file=${jpf-costar}/src/examples/plexil/parser/parser.pred
  
star.test_path=${test.path}/plexil
star.test_package=plexil

concolic.method.booleanValue=plexil.PlexilTreeParser.booleanValue(_t:antlr.collections.AST)
concolic.method.booleanValue.config=all_fields_symbolic

concolic.method.booleanTerm=plexil.PlexilTreeParser.booleanTerm(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.booleanTerm.config=all_fields_symbolic

concolic.method.booleanExpression=plexil.PlexilTreeParser.booleanExpression(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.booleanExpression.config=all_fields_symbolic

concolic.method.integerValue=plexil.PlexilTreeParser.integerValue(_t:antlr.collections.AST)
concolic.method.integerValue.config=all_fields_symbolic

concolic.method.numericTerm=plexil.PlexilTreeParser.numericTerm(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.numericTerm.config=all_fields_symbolic

concolic.method.numericExpression=plexil.PlexilTreeParser.numericExpression(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.numericExpression.config=all_fields_symbolic

concolic.method.absValue=plexil.PlexilTreeParser.absValue(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.absValue.config=all_fields_symbolic

concolic.method.sqrt=plexil.PlexilTreeParser.sqrt(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.sqrt.config=all_fields_symbolic

concolic.method.add=plexil.PlexilTreeParser.add(_t:antlr.collections.AST,parent:net.n3.nanoxml.IXMLElement)
concolic.method.add.config=all_fields_symbolic