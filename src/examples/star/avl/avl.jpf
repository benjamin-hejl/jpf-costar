@include=../star.jpf

target=star.avl.Driver

costar.data=data AvlNode {int element; AvlNode left; AvlNode right; int height}

costar.predicate.file=${jpf-costar}/src/examples/star/avl/avl.pred
  
star.test_path=${test.path}/avl

concolic.method.findMax=avl.AvlTree.findMax()
concolic.method.findMax.config=all_fields_symbolic

concolic.method.findMin=avl.AvlTree.findMin()
concolic.method.findMin.config=all_fields_symbolic

concolic.method.insert=avl.AvlTree.insert(x:int)
concolic.method.insert.config=all_fields_symbolic

concolic.method.isEmpty=avl.AvlTree.isEmpty()
concolic.method.isEmpty.config=all_fields_symbolic

concolic.method.makeEmpty=avl.AvlTree.makeEmpty()
concolic.method.makeEmpty.config=all_fields_symbolic

concolic.method.maxElement=avl.AvlTree.maxElement(maxE:int)
concolic.method.maxElement.config=all_fields_symbolic

concolic.method.minElement=avl.AvlTree.minElement(minE:int)
concolic.method.minElement.config=all_fields_symbolic

concolic.method.printTree=avl.AvlTree.printTree()
concolic.method.printTree.config=all_fields_symbolic

concolic.method.repOK=avl.AvlTree.repOK()
concolic.method.repOK.config=all_fields_symbolic