@include=../star.jpf

target=star.bst.Driver

costar.data=data bst_BinaryNode {int element; bst_BinaryNode left; bst_BinaryNode right}

costar.predicate.file=${jpf-costar}/src/examples/star/bst/bst.pred
  
star.test_path=${test.path}/bst
star.test_package=bst

concolic.method.findMax=bst.BinarySearchTree.findMax()
concolic.method.findMax.config=all_fields_symbolic

concolic.method.findMin=bst.BinarySearchTree.findMin()
concolic.method.findMin.config=all_fields_symbolic

concolic.method.find=bst.BinarySearchTree.find(x:int)
concolic.method.find.config=all_fields_symbolic

concolic.method.insert=bst.BinarySearchTree.insert(x:int)
concolic.method.insert.config=all_fields_symbolic

concolic.method.isEmpty=bst.BinarySearchTree.isEmpty()
concolic.method.isEmpty.config=all_fields_symbolic

concolic.method.makeEmpty=bst.BinarySearchTree.makeEmpty()
concolic.method.makeEmpty.config=all_fields_symbolic

concolic.method.printTree=bst.BinarySearchTree.printTree()
concolic.method.makeEmpty.config=all_fields_symbolic

concolic.method.remove=bst.BinarySearchTree.remove(x:int)
concolic.method.remove.config=all_fields_symbolic