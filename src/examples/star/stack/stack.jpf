@include=../star.jpf

target=star.stack.Driver

costar.data=data java_lang_Object {}; data stack_ListNode {java_lang_Object element; stack_ListNode next}

costar.predicate.file=${jpf-costar}/src/examples/star/stack/stack.pred
  
star.test_path=${test.path}/stack
star.test_package=stack

concolic.method.contains=stack.StackLi.contains(e:java.lang.Object)
concolic.method.contains.config=all_fields_symbolic

concolic.method.isEmpty=stack.StackLi.isEmpty()
concolic.method.isEmpty.config=all_fields_symbolic

concolic.method.isFull=stack.StackLi.isFull()
concolic.method.isFull.config=all_fields_symbolic

concolic.method.makeEmpty=stack.StackLi.makeEmpty()
concolic.method.makeEmpty.config=all_fields_symbolic

concolic.method.pop=stack.StackLi.pop()
concolic.method.pop.config=all_fields_symbolic

concolic.method.push=stack.StackLi.push(x:java.lang.Object)
concolic.method.push.config=all_fields_symbolic

concolic.method.topAndPop=stack.StackLi.topAndPop()
concolic.method.topAndPop.config=all_fields_symbolic

concolic.method.top=stack.StackLi.top()
concolic.method.top.config=all_fields_symbolic